{"ast":null,"code":"import React, { PureComponent } from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { server } from \"../env\";\nimport axios from \"axios\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StripeCheckout extends PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      creds: [],\n      sid: this.props.match.params.sid\n    };\n\n    this.componentDidMount = async () => {\n      localStorage.setItem(\"sid\", this.state.sid);\n      await axios.get(server + \"/v1/payment_method/read-public\").then(rsp => {\n        this.setState({\n          payment_methods: rsp.data.payload.payment_methods,\n          creds: rsp.data.payload.payment_creds\n        });\n      }).catch(err => {});\n      var stripe_creds = this.state.creds.filter(data => data.key === \"STRIPE_PUBLIC_KEY\")[0];\n      const stripePromise = loadStripe(stripe_creds.value);\n      const stripe = await stripePromise;\n      await stripe.redirectToCheckout({\n        sessionId: this.state.sid\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n\n}\n\nexport default StripeCheckout;","map":{"version":3,"names":["React","PureComponent","loadStripe","server","axios","StripeCheckout","state","creds","sid","props","match","params","componentDidMount","localStorage","setItem","get","then","rsp","setState","payment_methods","data","payload","payment_creds","catch","err","stripe_creds","filter","key","stripePromise","value","stripe","redirectToCheckout","sessionId","render"],"sources":["C:/Users/User/react/hostarena-dev/src/controllers/stripe.jsx"],"sourcesContent":["import React, { PureComponent } from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { server } from \"../env\";\nimport axios from \"axios\";\n\nclass StripeCheckout extends PureComponent {\n  state = {\n    creds: [],\n    sid: this.props.match.params.sid,\n  };\n  componentDidMount = async () => {\n    localStorage.setItem(\"sid\", this.state.sid);\n    await axios\n      .get(server + \"/v1/payment_method/read-public\")\n      .then((rsp) => {\n        this.setState({\n          payment_methods: rsp.data.payload.payment_methods,\n          creds: rsp.data.payload.payment_creds,\n        });\n      })\n      .catch((err) => {});\n\n    var stripe_creds = this.state.creds.filter(\n      (data) => data.key === \"STRIPE_PUBLIC_KEY\"\n    )[0];\n\n    const stripePromise = loadStripe(stripe_creds.value);\n    const stripe = await stripePromise;\n    await stripe.redirectToCheckout({\n      sessionId: this.state.sid,\n    });\n  };\n  render() {\n    return <></>;\n  }\n}\n\nexport default StripeCheckout;\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,cAAN,SAA6BJ,aAA7B,CAA2C;EAAA;IAAA;IAAA,KACzCK,KADyC,GACjC;MACNC,KAAK,EAAE,EADD;MAENC,GAAG,EAAE,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH;IAFvB,CADiC;;IAAA,KAKzCI,iBALyC,GAKrB,YAAY;MAC9BC,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4B,KAAKR,KAAL,CAAWE,GAAvC;MACA,MAAMJ,KAAK,CACRW,GADG,CACCZ,MAAM,GAAG,gCADV,EAEHa,IAFG,CAEGC,GAAD,IAAS;QACb,KAAKC,QAAL,CAAc;UACZC,eAAe,EAAEF,GAAG,CAACG,IAAJ,CAASC,OAAT,CAAiBF,eADtB;UAEZZ,KAAK,EAAEU,GAAG,CAACG,IAAJ,CAASC,OAAT,CAAiBC;QAFZ,CAAd;MAID,CAPG,EAQHC,KARG,CAQIC,GAAD,IAAS,CAAE,CARd,CAAN;MAUA,IAAIC,YAAY,GAAG,KAAKnB,KAAL,CAAWC,KAAX,CAAiBmB,MAAjB,CAChBN,IAAD,IAAUA,IAAI,CAACO,GAAL,KAAa,mBADN,EAEjB,CAFiB,CAAnB;MAIA,MAAMC,aAAa,GAAG1B,UAAU,CAACuB,YAAY,CAACI,KAAd,CAAhC;MACA,MAAMC,MAAM,GAAG,MAAMF,aAArB;MACA,MAAME,MAAM,CAACC,kBAAP,CAA0B;QAC9BC,SAAS,EAAE,KAAK1B,KAAL,CAAWE;MADQ,CAA1B,CAAN;IAGD,CA1BwC;EAAA;;EA2BzCyB,MAAM,GAAG;IACP,oBAAO,qCAAP;EACD;;AA7BwC;;AAgC3C,eAAe5B,cAAf"},"metadata":{},"sourceType":"module"}